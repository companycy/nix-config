
(setq load-path (cons "D:/emacs-lisp/" load-path))

;; m-x untabify
;; m-x whitespace-cleanup


;; To start recording, press 【Ctrl+x (】 (kmacro-start-macro).
;; Type your keystrokes.
;; To stop recording, press 【Ctrl+x )】 (kmacro-end-macro).
;; To run the keystrokes you've just recorded, press 【Ctrl+x e】 (kmacro-end-and-call-macro)

;; run eshell on xp

;; +	create a new dir
;; http://www.gnu.org/software/emacs/manual/html_node/emacs/Marks-vs-Flags.html
;; *s
;; 5 u/m
;; U
;; Remove all marks from all the files in this Dired buffer (dired-unmark-all-marks).
;; %m table
;; M-} move to next marked file
;; ^ goto parent dir

;;(setq backup-directory-alist
 ;;         `((".*" . ,"D:/emacs-23.2/tmp")))
;;(setq auto-save-file-name-transforms
 ;;         `((".*" ,"D:/emacs-23.2/tmp" t)))

;; (server-mode)
;; (load-file "D:/emacs-lisp/gnuserv.el")
;; (require 'gnuserv)
;; (gnuserv-start)
;; (setq gnuserv-frame (selected-frame))    ;在当前frame打开
;; (setenv "GNUSERV_SHOW_EMACS" "1")        ;打开后让emacs跳到前面来

;; (add-hook 'kill-emacs-hook
;;           (lambda()
;;             (if (file-exists-p "~/.emacs.d/server/server")
;;                 (delete-file "~/.emacs.d/server/server"))))


;; (setq shell-file-name "D:/bldenv.vob/cygwin_2.573/bin/bash.exe")
(setq default-process-coding-system '(utf-8-dos . euc-cn-unix))
(setq-default make-backup-files nil)


(setq w32-get-true-file-attributes nil)


;; desktop-save-mode
(desktop-save-mode t)
(global-set-key [f2] 'desktop-change-dir)
;; (setq desktop-path '("e:/"))

(global-set-key [f5] (lambda() (interactive) (revert-buffer t t)))

;; set font from Mac
;; c-u c-x =
(set-default-font "-outline-Monaco-normal-normal-normal-mono-13-*-*-*-c-*-iso8859-1")
;; (set-default-font "-outline-Menlo-normal-normal-normal-mono-14-*-*-*-c-*-iso8859-1")


;; (set-language-environment "Chinese-GB")
(set-language-environment 'Chinese-GB)
(set-keyboard-coding-system 'chinese-iso-8bit)

;; (set-keyboard-coding-system 'euc-cn)
;; (set-clipboard-coding-system 'euc-cn)
;; (set-terminal-coding-system 'euc-cn)
;; (set-buffer-file-coding-system 'euc-cn)
;; (set-selection-coding-system 'euc-cn)
;; (modify-coding-system-alist 'process "*" 'euc-cn)
;; (setq default-process-coding-system '(euc-cn . euc-cn))
;; (setq-default pathname-coding-system 'euc-cn)

(ansi-color-for-comint-mode-on)

(autoload 'ibuffer "ibuffer" "List buffers." t)
(global-set-key (kbd "C-x C-b") 'ibuffer)


;; (require 'cedet)
;; (global-ede-mode 1)                      ; Enable the Project management system
;; (semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion
;; (global-srecode-minor-mode 1)            ; Enable template insertion menu


(global-auto-revert-mode t)
;;==================================
;; C
;;==================================
(setq comment-multi-line t)  ;;
(which-func-mode t)          ;;

;; ================================
;; Javascript
;; ================================
;; js2-mode
;; (load-file "d:/emacs-lisp/js2-mode.elc")
;; (autoload 'js2-mode "js2-mode" nil t)
;; (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;; (setq js2-highlight-level 3)
;; (put 'upcase-region 'disabled nil)

;; js3-mode
(autoload 'js3-mode "js3" nil t)
;; (add-to-list 'auto-mode-alist '("\\.js$" . js3-mode))
(setq-default indent-tabs-mode nil)

;;===================================
;; hot-keys
;;===================================

(global-set-key "\M-/" 'hippie-expand)
(global-set-key "\M-o" 'other-window)
(global-set-key "\M-g" 'goto-line)

(global-set-key "\M-0" 'kill-this-buffer)
(global-set-key "\M-1" 'ido-switch-buffer-other-window)
(global-set-key "\M-2" 'delete-other-windows)
;; (when (or (eq system-type 'windows-nt) (eq system-type 'msdos))
;;   (setenv "PATH" (concat "D:\\GnuWin32\\bin;" (getenv "PATH")))
;;   (setq find-program "D:\\GnuWin32\\bin\\find.exe"
;; 	grep-program "D:\\GnuWin32\\bin\\grep.exe"))
(global-set-key "\M-3" 'rgrep)
;; (global-set-key "\M-3" 'split-window-vertically)
;; (global-set-key "\M-4" 'split-window-horizontally)
(global-set-key "\M-4" 'find-name-dired)
(global-set-key "\M-5" 'ff-find-related-file)

(global-set-key "\M-6" 'highlight-symbol-at-point)

(global-set-key "\M-7" 'goto-last-change)

(global-set-key "\M-8" 'grep-buffers)

(global-set-key "\M-9" 'set-mark-command)


(global-set-key "\C-z" 'undo)

(global-set-key (kbd "C-c") 'ctl-t-map)
(define-prefix-command 'ctl-t-map)
(global-set-key (kbd "C-c f") 'grep-find)   ;
;; (global-set-key (kbd "C-c g") 'grep)   ;
(global-set-key (kbd "C-c g") 'lgrep)   ;
(global-set-key (kbd "C-c o") 'occur)         ;
(global-set-key (kbd "C-c r") 'rename-buffer) ;


(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-visible
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-expand-line
        try-expand-line-all-buffers
        try-expand-list
        try-expand-list-all-buffers
        try-complete-file-name
        try-complete-file-name-partially
        try-complete-lisp-symbol
        try-complete-lisp-symbol-partially
        try-expand-whole-kill))



(global-set-key (kbd "C-c d") 'delete-line) ;
(defun delete-line nil
  "delete the whole line"
  (interactive)
  (beginning-of-line);
  (push-mark);
  (beginning-of-line 2);
  (kill-region (point) (mark)));

(global-set-key (kbd "C-c y") 'copy-lines)  ;
(defun copy-lines(&optional arg)
  (interactive "p")
  (save-excursion
        (beginning-of-line)
        (set-mark (point))
        (next-line arg)
        (kill-ring-save (mark) (point))))

(defun copy-line (&optional arg)
 "Save current line into Kill-Ring without mark the line"
 (interactive "P")
 (let ((beg (line-beginning-position))
        (end (line-end-position arg)))
 (copy-region-as-kill beg end))
)


(defun copy-word (&optional arg)
 "Copy words at point"
 (interactive "P")
 (let ((beg (progn (if (looking-back "[a-zA-Z0-9]" 1) (backward-word 1)) (point)))
        (end (progn (forward-word arg) (point))))
 (copy-region-as-kill beg end))
)


;; (defun copy-paragraph (&optional arg)
;;  "Copy paragraphes at point"
;;  (interactive "P")
;;  (let ((beg (progn (backward-paragraph 1) (point)))
;;      (end (progn (forward-paragraph arg) (point))))
;;  (copy-region-as-kill beg end))
;; )


(global-set-key (kbd "C-c f") 'go-to-char)  ;c-f a => 
(defun go-to-char (n char)
  "Move forward to Nth occurence of CHAR.
  Typing `wy-go-to-char-key' again will move forwad to the next Nth
  occurence of CHAR."
  (interactive "p\ncGo to char: ")
  (search-forward (string char) nil nil n)
  (while (char-equal (read-char)
		     char)
    (search-forward (string char) nil nil n))
  (setq unread-command-events (list last-input-event)))



(global-set-key "%" 'match-paren)
(defun match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
                ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
                (t (self-insert-command (or arg 1)))))

;(define-key ibuffer-mode-map "r" 'ywb-ibuffer-rename-buffer)
  (defun ywb-ibuffer-rename-buffer ()
    (interactive)
    (call-interactively 'ibuffer-update)
    (let* ((buf (ibuffer-current-buffer))
           (name (generate-new-buffer-name
                  (read-from-minibuffer "Rename buffer(to new name): "
                                        (buffer-name buf)))))
      (with-current-buffer buf
        (rename-buffer name)))
    (call-interactively 'ibuffer-update))

;;========================================
;; appearance
;;========================================
;; (defun w32-restore-frame ()
;; "Restore a minimized frame"
;; (interactive)
;; (w32-send-sys-command 61728))

;; (defun w32-maximize-frame ()
;; "Maximize the current frame"
;; (interactive)
;; (w32-send-sys-command 61488))
;; (w32-maximize-frame)

(require 'maxframe)
(add-hook 'window-setup-hook 'maximize-frame t)


(setq frame-title-format "%b")          ;%b@emacs
(setq inhibit-startup-message t)


;; (require 'golden-ratio)
;; (golden-ratio-enable)

;; (line-number-mode t)


(auto-image-file-mode t);
(fset 'yes-or-no-p 'y-or-n-p);




(display-time-mode 1)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)

(setq suggest-key-bindings 1)

;;(setq track-eol t)  ;;

(setq-default kill-whole-line t) ;

;(setq default-line-spacing 0)

;(setq default-fill-column 80)

(setq default-major-mode 'text-mode) ;
(add-hook 'text-mode-hook 'turn-on-auto-fill)



(setq kill-ring-max 200)

(setq require-final-newline t) ;

(global-font-lock-mode t) ;;

(transient-mark-mode t) ;;

(setq scroll-margin 5 ;;
      scroll-conservatively 10000)

(show-paren-mode t)
(setq show-paren-style 'parentheses)

(mouse-avoidance-mode 'animate) ;

(setq isearch-allow-scroll t)

;;====================================
;; plugins
;;====================================
(load-file "d:/emacs-lisp/grep-buffers.el")
(require 'grep-buffers)
;; (global-set-key "\M-8” 'grep-buffers)

(require 'grep-edit)

;; (require 'quick-jump)
;; (quick-jump-default-keybinding)

(load-file "D:/emacs-lisp/goto-last-change.el")
(require 'goto-last-change)
;; (global-set-key "\M-7" 'goto-last-change)

;; auto complete
(add-to-list 'load-path "D:/emacs-lisp/auto-complete")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "D:/emacs-lisp/auto-complete/ac-dict")
(ac-config-default)


(require 'ido)
(ido-mode t)
(setq ido-enable-tramp-completion t)
(setq ido-save-directory-list-file nil)


(setq search-highlight t)
(setq grep-highlight-matches t)
(setq query-replace-highlight t)


(load-file "D:/emacs-lisp/highlight-symbol.el")
(require 'highlight-symbol)
;; (global-set-key "\M-6" 'highlight-symbol-at-point)
;; (global-set-key [f3] 'highlight-symbol-next)
;; (global-set-key [(shift f3)] 'highlight-symbol-prev)



(require 'cc-mode)
(c-set-offset 'inline-open 0)
;;(c-set-offset 'friend . -)
(c-set-offset 'substatement-open 0)
;; (c-set-offset 'defun-block-intro 0)

;;set *.h and *.c and *.cpp files use c++ mode
(setq auto-mode-alist
      (cons '("\\.h$" . c++-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.c$" . c++-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.cpp$" . c++-mode) auto-mode-alist))


;;Create MyCppStyle
(defconst MyCppStyle
'((c-tab-always-indent . t)
  (c-comment-only-line-offset . 0)
  (c-hanging-braces-alist . ((substatement-open after)
                             (brace-list-open)))
  (c-cleanup-list . (comment-close-slash
                     compact-empty-funcall))
  (c-offsets-alist . ((substatement-open . 0)
                      (innamespace . 0)             ;;在namespace中不缩进
                      (case-label      . +)         ;;case标签缩进一个c-basic-offset单位
                      (access-label . -)            ;;private/public等标签少缩进一单位
                      (inline-open . 0)             ;;在.h文件中写函数，括号不缩进
                      (block-open     . 0)))        ;;在一个新块开始时不缩进
  ;;    (c-echo-syntactic-information-p t)
  (setq comment-start "/*"
                comment-end "*/")
  (setq indent-tabs-mode nil))
"My Cpp Coding Style")

;; (c-add-style "MyCppStyle" MyCppStyle)               ;;定义完自己的style，将其添加到cc-mode的style中

;;Define own hook
;; (defun MyCppHook ()
;;   ;; (company-mode)
;; (setq indent-tabs-mode nil)
;; (setq global-hl-line-mode t)
;; (c-set-style "MyCppStyle"))                         ;;设置这个hook对应于MyCppStyle

;; (add-hook 'c++-mode-hook 'MyCppHook)                ;;将此hook应用于所有的c++模式
;; (add-hook 'c-mode-hook 'MyCppHook)                ;;将此hook应用于所有的c++模式

(load-file "D:/emacs-lisp/google-c-style.el")
(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c++-mode-common-hook 'google-set-c-style)
(add-hook 'c-mode-common-hook 'google-make-newline-indent)

(defun cpplint ()
  "check source code format according to Google Style Guide"
  (interactive)
  (compilation-start (concat "python D:/emacs-lisp/cpplint.py " (buffer-file-name))))

(setq vc-handled-backends nil)


(load-file "D:/emacs-lisp/browse-kill-ring.el")
(require 'browse-kill-ring)
(global-set-key (kbd "M-y") 'browse-kill-ring)
;;(browse-kill-ring-default-keybinding)


(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
;;(setq uniquify-buffer-name-style "forward")

;; (require 'linum)
;; (setq linum-format "%3d ")
;; (add-hook 'find-file-hooks (lambda () (linum-mode 1))) ;

(load-file "D:/emacs-lisp/color-theme.el")
(require 'color-theme)
(load-file "D:/emacs-lisp/color-theme-si.el")
(color-theme-si)
;; (color-theme-calm-forest)
;; (color-theme-classic)


;; (global-set-key [f3] 'repeat-complex-command)


(setq dired-recursive-copies 'top)
(setq dired-recursive-deletes 'top)

(load-file "D:/emacs-lisp/tortoise-svn.el")
(require 'tortoise-svn)
(add-to-list 'exec-path "D:/TortoiseSVN/bin/")

;; (load-file "d:/emacs-lisp/xcscope.el")
;; (require 'xcscope) ;;only for *ix
;; (setq cscope-do-not-update-database t)


;;(define-key c-mode-base-map [(tab)] 'my-indent-or-complete)

;;========================================
;; org-mode
;;========================================
(global-set-key "\C-cr" 'org-remember)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-ido-switchb)
;(global-set-key "\C-cg" 'gtd)


;; (setq org-default-notes-file "D:/emacs-23.2/.emacs.d/.notes")
;; (setq org-directory "D:/emacs-23.2/.emacs.d/org/")
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

;; (setq todo-file-do "D:/emacs-23.2/.emacs.d/todo/do")
;; (setq todo-file-done "D:/emacs-23.2/.emacs.d/todo/done")
;; (setq todo-file-top "D:/emacs-23.2/.emacs.d/todo/top")

;; (setq diary-file "D:/emacs-23.2/.emacs.d/diary")


(setq org-todo-keywords
       '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))


(setq org-stuck-projects
        '("+PROJECT/-MAYBE-DONE" ("NEXT" "TODO") ("@SHOP")
                                    "\\<IGNORE\\>"))
(setq org-agenda-exporter-settings
        '((ps-number-of-columns 2)
        (ps-landscape-mode t)
        (org-agenda-add-entry-text-maxlines 5)
        (htmlize-output-type 'css)))

(setq org-agenda-custom-commands
      '(("X" agenda "" nil ("agenda.html" "agenda.ps"))
        ("Y" alltodo "" nil ("todo.html" "todo.txt" "todo.ps"))
        ("h" "Agenda and Home-related tasks"
         ((agenda "")
          (tags-todo "home")
          (tags "garden"))
         nil
         ("~/views/home.html"))
        ("o" "Agenda and Office-related tasks"
         ((agenda)
          (tags-todo "work")
          (tags "office"))
         nil
         ("~/views/office.ps" "~/calendars/office.ics"))))

(setq org-tag-alist '((:startgroup . nil)
                      ("@work" . ?w) ("@home" . ?h)
                      ("@features" . ?f)
                      (:endgroup . nil)
                      ("laptop" . ?l) ("pc" . ?p)))

(add-hook 'org-remember-mode-hook
          (lambda ()
            (set (make-local-variable
                  'org-complete-tags-always-offer-all-agenda-tags)
                 t)))


(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)


;(setq diary-mail-addr "you@your.email.address")
(add-hook 'diary-hook 'appt-make-list)

(setq org-agenda-include-diary t)
(add-hook 'org-agenda-mode-hook 'hl-line-mode)
(add-hook 'org-mode-hook 'turn-on-font-lock)  ; Org buffers only

(setq org-log-done 'time)
;(setq org-log-done 'note)

(setq read-file-name-completion-ignore-case t)
(setq auto-save-default nil)
(setq enable-recursive-minibuffers t)
(setq yank-pop-change-selection t)
(setq tramp-unified-filenames t)
(setq-default auto-fill-function 'do-auto-fill)  ; Autofill in all modes
